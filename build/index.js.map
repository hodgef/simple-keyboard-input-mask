{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","components/InputMask.js","../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SimpleKeyboardInputMask","instance","Constructor","TypeError","init","keyboard","registerModule","options","inputMask","console","warn","fn","getUpdatedInput","utilities","button","input","caretPos","moveCaret","inputMaskStr","isBksp","inputName","overrides","autoAddSymbol","inputProposal","validateInputProposal","getInput","inputPropArr","split","validated","length","isCharAllowed","character","maskCharacter","numberCheck","isNumber","letterCheck","isLetter","isNaN","Number","match","letterCheckPattern","defaultCheckPattern","isSymbol","trim","inputMaskArr","addStringAt","caretPosition"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboardInputMask\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboardInputMask\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboardInputMask\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","class SimpleKeyboardInputMask {\r\n  init = (keyboard) => {\r\n    keyboard.registerModule(\r\n      \"inputMask\",\r\n      (module) => {\r\n        if(!keyboard.options.inputMask){\r\n          console.warn(\"SimpleKeyboardInputMask: You must provide the inputMask option with your input mask\");\r\n          return false;\r\n        }\r\n\r\n        module.fn = {};\r\n        module.fn.getUpdatedInput = keyboard.utilities.getUpdatedInput;\r\n\r\n        keyboard.utilities.getUpdatedInput = (button, input, options, caretPos, moveCaret) => {\r\n          let inputMask = keyboard.options.inputMask;\r\n\r\n          if(\r\n            inputMask && (typeof inputMask === \"object\" || typeof inputMask === \"string\") &&\r\n            !module.isBksp(button) &&\r\n            moveCaret\r\n          ){\r\n            let inputMaskStr;\r\n\r\n            if(typeof inputMask === \"object\"){\r\n              inputMaskStr = keyboard.options.inputMask[keyboard.options.inputName];\r\n            } else {\r\n              inputMaskStr = inputMask;\r\n            }\r\n            \r\n            let overrides = module.autoAddSymbol(caretPos, input, inputMaskStr, button);\r\n            \r\n            input = overrides.input || input;\r\n            caretPos =  overrides.caretPos || caretPos;\r\n\r\n            let inputProposal = module.fn.getUpdatedInput(button, input, options, caretPos, false);\r\n\r\n            if(module.validateInputProposal(inputProposal, inputMaskStr, caretPos)){\r\n              return module.fn.getUpdatedInput(button, input, options, caretPos, moveCaret);\r\n            } else {\r\n              return keyboard.getInput();\r\n            }\r\n\r\n          } else {\r\n            return module.fn.getUpdatedInput(button, input, options, caretPos, moveCaret);\r\n          }\r\n        }\r\n\r\n        module.validateInputProposal = (inputProposal, inputMask, caretPos) => {\r\n          if(\r\n            (inputProposal && typeof inputProposal === \"string\") &&\r\n            (inputMask && typeof inputProposal === \"string\")\r\n          ){\r\n            let inputPropArr = inputProposal.split(\"\");\r\n            let validated = true;\r\n            let i = caretPos || 0;\r\n\r\n            if(\r\n              (\r\n                // When caret at the beginning\r\n                (\r\n                  caretPos === 0 ||\r\n                  // When caret is not at max *and* there's no next char already present\r\n                  caretPos < inputProposal.length\r\n                ) && !inputProposal[caretPos + 1]\r\n                // When max reched\r\n              ) || inputMask.length === inputProposal.length - 1\r\n            ){\r\n              for(i = 0; i < inputPropArr.length; i++){\r\n                let charCompareRes = module.isCharAllowed(inputPropArr[i], inputMask[i]);\r\n  \r\n                if(!charCompareRes){  \r\n                  validated = false;\r\n                  return false;\r\n  \r\n  \r\n                }\r\n              }\r\n            }\r\n\r\n            return validated;\r\n          } else {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        module.isCharAllowed = (character, maskCharacter) => {\r\n          if(!(character && maskCharacter)){\r\n            return false;\r\n          }\r\n\r\n          /**\r\n           * Number check\r\n           */\r\n          let numberCheck = (\r\n            module.isNumber(character) &&\r\n            module.isNumber(maskCharacter)\r\n          );\r\n\r\n          /**\r\n           * Letter check\r\n           */\r\n          let letterCheck = (\r\n            module.isLetter(character) &&\r\n            module.isLetter(maskCharacter)\r\n          );\r\n\r\n          /**\r\n           * Symbol check\r\n           */\r\n          let symbolCheck = (\r\n            // If char not maskChar are numbers or letters\r\n            (!numberCheck && !letterCheck) &&\r\n            // If char and maskChar are the same\r\n            character === maskCharacter\r\n          );\r\n\r\n          return (numberCheck || letterCheck || symbolCheck);\r\n        }\r\n\r\n        module.isBksp = (button) => {\r\n          return (button === \"{bksp}\" || button === \"{backspace}\");\r\n        }\r\n\r\n        module.isNumber = (input) => {\r\n          return (\r\n            // If char is a number\r\n            !isNaN(Number(input)) &&\r\n            // If char is not a whitespace\r\n            input.match(/^\\s$/) === null\r\n          );\r\n        }\r\n\r\n        module.isLetter = (input) => {\r\n          let letterCheckPattern;\r\n          let defaultCheckPattern = /[a-z]/i;\r\n\r\n          if(typeof keyboard.options.letterCheckPattern === \"object\"){\r\n            letterCheckPattern = keyboard.options.letterCheckPattern[keyboard.options.inputName] || defaultCheckPattern;\r\n          } else {\r\n            letterCheckPattern = keyboard.options.letterCheckPattern || defaultCheckPattern;\r\n          }\r\n\r\n          return (\r\n            // If char is a letter\r\n            input.match(letterCheckPattern)\r\n          );\r\n        }\r\n\r\n        module.isSymbol = () => {\r\n          \r\n        }\r\n\r\n        module.autoAddSymbol = (caretPos, input, inputMaskStr, button) => {\r\n          if(\r\n            !input.trim() &&\r\n            !caretPos\r\n          ){\r\n            caretPos = 0;\r\n          } else {\r\n            caretPos = input.length;\r\n          }\r\n\r\n          let inputMaskArr = inputMaskStr.split(\"\");\r\n\r\n          for(let i = caretPos; i < inputMaskArr.length; i++){\r\n            if(\r\n              inputMaskArr[i] &&\r\n              !module.isNumber(inputMaskArr[i]) &&\r\n              !module.isLetter(inputMaskArr[i]) &&\r\n              Number(button)\r\n            ){\r\n              input = keyboard.utilities.addStringAt(input, inputMaskArr[i], i, false);\r\n              keyboard.caretPosition = keyboard.caretPosition ? keyboard.caretPosition+1 : 1;\r\n            } else {\r\n              break;\r\n            }\r\n          }\r\n\r\n          return {\r\n            input: input,\r\n            caretPos: keyboard.caretPosition\r\n          };\r\n        }\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboardInputMask;","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","import SimpleKeyboardInputMask from './components/InputMask';\r\nexport default SimpleKeyboardInputMask;\r\n"],"sourceRoot":""}